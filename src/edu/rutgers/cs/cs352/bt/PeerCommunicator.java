/**
 * 
 */
package edu.rutgers.cs.cs352.bt;

/**
 * @author Julian Modesto
 *
 */
public class PeerCommunicator {

	/**
	 * Generates the handshake from the client to the peer
	 * 
	 * @author Julian Modesto
	 * @param infohash the 20-byte SHA-1 hash of the bencoded form of the info value from the metainfo (.torrent) file
	 * @param peerID the peer id generated by the client
	 * @return the handshake byte array
	 */
	public static byte[] getHandshake(byte[] infohash, byte[] peerID) {
		byte[] handshake = new byte[68];
		int position = 0;
		
		// Header 19:BitTorrent protocol
		// Begin with byte 19
		handshake[0] = 19;
		
		// Add "BitTorrent protocol"
		byte[] header = {'B','i','t','T','o','r','r','e','n','t',' ','p','r','o','t','o','c','o','l'};
		System.arraycopy(header, 0, handshake, 1, header.length);
		
		// 8 reserved bytes 20-27 are already initialized to 0; skip + omit commented-out code below
//		// Add 8 reserved bytes which are set to 0
//		byte[] reserved = new byte[8]; // Initialized to 0
//		System.arraycopy(reserved, 0, handshake, 20, reserved.length);
		
		// Add infohash
		System.arraycopy(infohash, 0, handshake, 28, infohash.length);
		
		// Add peer id
		System.arraycopy(peerID, 0, handshake, 48, peerID.length);	
		
		return handshake;
	}
	
	/**
	 * 
	 */
	public void getAvailablePieces() {
		
	}
	
	/**
	 * 
	 */
	public void sendInterestedInPiece() {
		
	}
	
	/**
	 * 
	 */
	public void requestPiece() {
		
	}
}
